{"version":3,"sources":["App.js","utils/index.js","reportWebVitals.js","index.js"],"names":["Square","styled","div","props","backgroundColor","size","isEmpty","initialHoverData","rowIndex","colIndex","count","grid","App","useState","gridSize","setGripSize","hoverColor","setHoverColor","setBackgroundColor","setGrid","hoverData","setHoverData","clickData","setClickData","useEffect","m","n","min","max","i","row","j","push","Math","floor","random","generateRandomGrid","onMouseEnter","result","copyGrid","JSON","parse","stringify","dfs","length","directions","index","markGrid","className","type","id","name","value","onChange","e","target","htmlFor","map","col","onClick","onSquareClick","onMouseLeave","renderGrid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50559a58.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { generateRandomGrid, markGrid } from './utils';\n\nconst Square = styled.div`\n  background-color: ${props => props.backgroundColor};\n  color: #fff;\n  font-size: ${props => props.size <= 20 ? '100%' : '50%'};\n  transition: .4s;\n\n  :hover {\n    cursor: ${props => props.isEmpty ? 'default' : 'pointer'}\n  }\n`;\n\nconst initialGridSize = 5;\nconst emptyColor = '#eee';\nconst initialHoverColor = '#ff6670';\nconst initialBackgroundColor = '#ffd000';\nconst initialHoverData = {\n  rowIndex: null,\n  colIndex: null,\n  count: null,\n  grid: null\n};\n\nfunction App() {\n  const [gridSize, setGripSize] = useState(initialGridSize);\n  const [hoverColor, setHoverColor] = useState(initialHoverColor);\n  const [backgroundColor, setBackgroundColor] = useState(initialBackgroundColor);\n  const [grid, setGrid] = useState([]);\n  const [hoverData, setHoverData] = useState(initialHoverData);\n  const [clickData, setClickData] = useState(initialHoverData);\n\n  useEffect(() => {\n    if (gridSize > 0) {\n      setGrid(generateRandomGrid(gridSize, gridSize));\n      setHoverData(initialHoverData);\n      setClickData(initialHoverData);\n    }\n  }, [gridSize]);\n\n  const onGridSizeChange = e => {\n    if (!e.target.value || e.target.value === gridSize) return;\n    setGripSize(e.target.value);\n  };\n\n  const onHoverColorChange = e => {\n    if (!e.target.value || e.target.value === hoverColor) return;\n    setHoverColor(e.target.value);\n  };\n\n  const onBackgroundColorChange = e => {\n    if (!e.target.value || e.target.value === backgroundColor) return;\n    setBackgroundColor(e.target.value);\n  };\n\n  const onSquareClick = (rowIndex, colIndex) => {\n    setClickData({\n      ...hoverData,\n      rowIndex,\n      colIndex\n    })\n  };\n\n  const onMouseEnter = (rowIndex, colIndex) => {\n    if (hoverData.grid && hoverData.grid[rowIndex][colIndex] === -1) return;\n    const result = markGrid(grid, rowIndex, colIndex);\n    setHoverData(result);\n  };\n\n  const onMouseLeave = (rowIndex, colIndex) => {\n    if (hoverData.grid && hoverData.grid[rowIndex][colIndex] !== -1) {\n      setHoverData(initialHoverData);\n    }\n  };\n\n  const renderGrid = grid => {\n    if (!grid || !grid[0]) return null;\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((col, colIndex) => (\n              <Square\n                key={colIndex}\n                className=\"col\"\n                size={grid.length}\n                backgroundColor={grid[rowIndex][colIndex] === 0 ? emptyColor : grid[rowIndex][colIndex] === -1 ? hoverColor : backgroundColor}\n                isEmpty={grid[rowIndex][colIndex] === 0}\n                onClick={() => grid[rowIndex][colIndex] !== 0 && onSquareClick(rowIndex, colIndex)}\n                onMouseEnter={() => grid[rowIndex][colIndex] !== 0 && onMouseEnter(rowIndex, colIndex)}\n                onMouseLeave={() => grid[rowIndex][colIndex] !== 0 && onMouseLeave(rowIndex, colIndex)}\n              >\n                {clickData.rowIndex === rowIndex && clickData.colIndex === colIndex\n                  ? clickData.count : null\n                }\n              </Square>\n            ))}\n          </div>\n        ))}\n      </div>\n    )\n  };\n\n  return (\n    <div className=\"wrap\">\n      <div className=\"container\">\n        <header className=\"header\">\n          <h1>Grid App</h1>\n        </header>\n        <main className=\"main\">\n          <div className=\"sidenav\">\n            <div className=\"control-panel\">\n              <div className=\"control-item\">\n                <input type=\"range\" id=\"grid-size\" name=\"grid-size\" min={1} max={50} value={gridSize} onChange={onGridSizeChange} />\n                <label htmlFor=\"grid-size\">Grid Size (<b>{gridSize} X {gridSize}</b>)</label>\n              </div>\n              <div className=\"control-item\">\n                <input type=\"color\" id=\"hover-color\" name=\"hover-color\" value={hoverColor} onChange={onHoverColorChange} />\n                <label htmlFor=\"hover-color\">Hover Color (<b>{hoverColor}</b>)</label>\n              </div>\n              <div className=\"control-item\">\n                <input type=\"color\" id=\"background-color\" name=\"background-color\" value={backgroundColor} onChange={onBackgroundColorChange} />\n                <label htmlFor=\"background-color\">Background Color (<b>{backgroundColor}</b>)</label>\n              </div>\n            </div>\n          </div>\n\n          {renderGrid(hoverData.grid ? hoverData.grid : grid)}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// generate a random integer between min and max\nexport function getRandomInt(min, max) {\n  return Math.floor(min + (max - min + 1) * Math.random());\n}\n\n// generate a two-dimensional random array\nexport function generateRandomGrid(m, n) {\n  let grid = [];\n  for (let i = 0; i < m; i++) {\n    let row = [];\n    for (let j = 0; j < n; j++) {\n      row.push(getRandomInt(0, 1));\n    }\n    grid.push(row);\n  }\n  return grid; \n}\n\n// mark a two-dimensional array based on the given position (i, j)\n// 0: empty square, 1: filled square, -1: current connected filled square\nexport function markGrid(grid, i, j) {\n  if (!grid || !grid[0]) return grid;\n\n  let copyGrid = JSON.parse(JSON.stringify(grid));\n  let count = 0;\n\n  function dfs(grid, i, j) {\n    if (i >= 0 && i < grid.length \n      && j >= 0 && j < grid[0].length\n      && grid[i][j] === 1\n    ) {\n      grid[i][j] = -1;\n      count++;\n      const directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n      for (let index in directions) {\n        dfs(grid, i + directions[index][0], j + directions[index][1]);\n      }\n    }\n  }\n\n  dfs(copyGrid, i, j);\n  return {\n    rowIndex: i,\n    colIndex: j, \n    grid: copyGrid,\n    count\n  };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}